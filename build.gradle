plugins {
//    id 'signing'
    id 'nebula.release' version '15.2.0'
    id 'java-gradle-plugin'
    id 'com.gradle.plugin-publish' version '1.2.0'
    id 'maven-publish'
}
repositories {
    mavenCentral()
}
group = 'io.github.bijukunjummen'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17
//version="0.10-rc6"

ext{
    functionInvokerVersion = "1.2.1"
    functionsApiVersion = "1.0.4"
}

ext.isSnapshot = version.toString().endsWith("-SNAPSHOT")
ext.isReleaseVersion = !ext.isSnapshot

//if (ext.isSnapshot) {
    publishing {
        repositories {
            mavenLocal()
        }
    }

//    task install {
//        dependsOn publishToMavenLocal
//    }
//}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

tasks.snapshot {
    finalizedBy tasks.publish
}

tasks.candidate {
    finalizedBy tasks.publishPlugins
}

tasks.final {
    finalizedBy tasks.publishPlugins
}

dependencies {
    implementation("com.google.cloud.functions.invoker:java-function-invoker:${functionInvokerVersion}")
    testImplementation('org.junit.jupiter:junit-jupiter:5.8.2')
}

java {
    withJavadocJar()
    withSourcesJar()
}

pluginBundle {
    website = 'https://bijukunjummen.github.io/gcp-cloudfunction-gradle-plugin/'
    vcsUrl = 'https://github.com/bijukunjummen/gcp-cloudfunction-gradle-plugin'
    tags = ['gcp', 'java', 'serverless']
}

gradlePlugin {
    plugins {
        cloudFunction {
            id = 'io.github.bijukunjummen.cloudfunction'
            implementationClass = 'com.github.bijukunjummen.cloudfunction.GcpCloudFunctionGradlePlugin'
            displayName = 'Cloud Function Invoker'
            description = 'Run Invoker on Google Cloud Function'
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    useJUnitPlatform()
}